# 进程号
pid = "./run/cluster.pid"
# 开发模式。支持模式：debug、test、release（设置优先级：配置文件 < 环境变量 < 运行参数 < mode.SetMode()）
mode = "debug"
# 统一时区设置。项目中的时间获取请使用xtime.Now()
timezone = "Local"
# 容器关闭最大等待时间。支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为0
shutdownMaxWaitTime = "0s"

# 分布式集群模块
[cluster]
    # 集群网关配置
    [cluster.gate]
        # 实例ID，集群中唯一。不填写默认自动生成唯一的实例ID
        id = ""
        # 实例名称
        name = "gate"
        # 内建RPC服务器监听地址。不填写默认随机监听
        addr = ":0"
        # RPC调用超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为3s
        timeout = "3s"
    # 集群节点配置
    [cluster.node]
        # 实例ID，集群中唯一。不填写默认自动生成唯一的实例ID
        id = ""
        # 实例名称
        name = "node"
        # 内建RPC服务器监听地址。不填写默认随机监听
        addr = ":0"
        # 编解码器。可选：json | proto。默认为proto
        codec = "proto"
        # RPC调用超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为3s
        timeout = "3s"
        # 节点权重，用于集群节点的负载均衡策略
        weight = 0
    # 集群网格配置
    [cluster.mesh]
        # 实例ID，集群中唯一。不填写默认自动生成唯一的实例ID
        id = ""
        # 实例名称
        name = "mesh"
        # 编解码器。可选：json | proto。默认为proto
        codec = "proto"
    # 集群客户端配置，常用于调试使用
    [cluster.client]
        # 实例ID，集群中唯一。不填写默认自动生成唯一的实例ID
        id = ""
        # 实例名称
        name = "client"
        # 编解码器。可选：json | proto。默认为proto
        codec = "proto"

# 任务池模块
[task]
    # 任务池大小(goroutine)
    size = 100000
    # 是否非阻塞
    nonblocking = true
    # 是否禁用清除。
    disablePurge = true

# http服务器模块
[http]
    # 服务器名称
    name = "http"
    # 服务器监听地址，默认为:8080
    addr = ":8080"
    # 是否启用控制台输出，默认为false
    console = false
    # body大小，支持单位： B | K | KB | M | MB | G | GB | T | TB | P | PB | E | EB | Z | ZB，默认为4 * 1024 * 1024
    bodyLimit = "4M"
    # 最大并发连接数，默认为256 * 1024
    concurrency = 262144
    # 是否启用严格路由模式，默认为false，启用后"/foo"与"/foo/"为两个不同的路由
    strictRouting = false
    # 是否区分路由大小写，默认为false， 启用后"/FoO"与"/foo"为两个不同的路由
    caseSensitive = false
    # 秘钥文件
    keyFile = ""
    # 证书文件
    certFile = ""
    # 跨域配置
    [http.cors]
        # 是否启用跨域
        enable = false
        # 允许跨域的请求源。默认为[]，即为允许所有请求源
        allowOrigins = []
        # 允许跨域的请求方法。默认为["GET", "POST", "HEAD", "PUT", "DELETE", "PATCH"]
        allowMethods = []
        # 允许跨域的请求头部。默认为[]，即为允许所有请求头部
        allowHeaders = []
        # 当允许所有源时，根据CORS规范不允许携带凭据。默认为false
        allowCredentials = false
        # 允许暴露给客户端的头部。默认为[]，即为允许暴露所有头部
        exposeHeaders = []
        # 浏览器缓存预检请求结果的时间。默认为0
        maxAge = 0
        # 是否允许来自私有网络的请求。设置为true时，响应头Access-Control-Allow-Private-Network会被设置为true。默认为false
        allowPrivateNetwork = false
    # swagger文档配置
    [http.swagger]
        # 是否启用文档
        enable = true
        # API文档标题
        title = "API文档"
        # URL访问基础路径
        basePath = "/swagger"
        # swagger文件路径
        filePath = "./docs/swagger.json"

# 传输模块
[transport]
    # GRPC相关配置
    [transport.grpc]
        # GRPC服务器相关配置
        [transport.grpc.server]
            # 服务器监听地址。空或:0时系统将会随机端口号
            addr = ":0"
            # 秘钥文件
            keyFile = ""
            # 证书文件
            certFile = ""
        # GRPC客户端相关配置
        [transport.grpc.client]
            # 证书文件
            certFile = ""
            # 证书域名
            serverName = ""
    # RPCX相关配置
    [transport.rpcx]
        # RPCX服务器相关配置
        [transport.rpcx.server]
            # 服务器监听地址。空或:0时系统将会随机端口号
            addr = ":0"
            # 秘钥文件
            keyFile = ""
            # 证书文件
            certFile = ""
        # RPCX客户端相关配置
        [transport.rpcx.client]
            # 证书文件
            certFile = ""
            # 证书域名
            serverName = ""
            # 连接池大小，默认为10
            poolSize = 10

# 框架默认打包器统一采用以下的打包格式，自定义打包器可自行定义打包规则
# 心跳包
# ------------------------------------------------------------------------------
# | size(4 byte) = (1 byte + 8 byte) | header(1 byte) | heartbeat time(8 byte) |
# ------------------------------------------------------------------------------
#
#  0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
# +---------------------------------------------------------------+-+-------------+---------------------------------------------------------------+
# |                              size                             |h|   extcode   |                      heartbeat time (ns)                      |
# +---------------------------------------------------------------+-+-------------+---------------------------------------------------------------+

# 数据包
# -----------------------------------------------------------------------------------------------------------------------
# | size(4 byte) = (1 byte + n byte + m byte + x byte) | header(1 byte) | route(n byte) | seq(m byte) | message(x byte) |
# -----------------------------------------------------------------------------------------------------------------------
#
#  0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
# +---------------------------------------------------------------+-+-------------+-------------------------------+-------------------------------+
# |                              size                             |h|   extcode   |             route             |              seq              |
# +---------------------------------------------------------------+-+-------------+-------------------------------+-------------------------------+
# |                                                                message data ...                                                               |
# +-----------------------------------------------------------------------------------------------------------------------------------------------+
[packet]
    # 字节序，默认为big。可选：little | big
    byteOrder = "big"
    # 路由字节数，默认为2字节
    routeBytes = 2
    # 序列号字节数，默认为2字节
    seqBytes = 2
    # 消息字节数，默认为5000字节
    bufferBytes = 5000

# 日志模块
[log]
    # 日志输出文件
    file = "../../testdata/log/due.log"
    # 日志输出级别，可选：debug | info | warn | error | fatal | panic
    level = "info"
    # 日志输出格式，可选：text | json
    format = "text"
    # 是否输出到终端
    stdout = true
    # 时间格式，标准库时间格式
    timeFormat = "2006/01/02 15:04:05.000000"
    # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
    stackLevel = "error"
    # 文件最大留存时间，d:天、h:时、m:分、s:秒
    fileMaxAge = "7d"
    # 文件最大尺寸限制，单位（MB）
    fileMaxSize = 100
    # 文件切割方式
    fileCutRule = "day"
    # 是否启用调用文件全路径
    callerFullPath = true
    # 是否启用分级存储
    classifiedStorage = true
    # 阿里云SLS日志服务。以下配置项如果不存在，则会使用log域中的默认配置项；如果都未配置，则会使用系统默认配置
    [log.aliyun]
        # 服务域名，公网使用公网域名，内网使用私网域名
        endpoint = "cn-chengdu.log.aliyuncs.com"
        # 访问密钥ID
        accessKeyID = ""
        # 访问密钥密码
        accessKeySecret = ""
        # 项目名称
        project = "due-test"
        # 日志存储
        logstore = "app"
        # 主题标签，默认为空
        topic = ""
        # 来源标签，默认为空
        source = ""
        # 日志输出级别，可选：debug | info | warn | error | fatal | panic
        level = "info"
        # 是否输出到终端
        stdout = true
        # 是否同步输出到远端
        syncout = false
        # 时间格式，标准库时间格式
        timeFormat = "2006/01/02 15:04:05.000000"
        # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
        stackLevel = "error"
        # 是否启用调用文件全路径
        callerFullPath = true
    # logrus日志组件。以下配置项如果不存在，则会使用log域中的默认配置项；如果均未配置，则会使用系统默认配置
    [log.logrus]
        # 日志输出文件
        file = "../../testdata/log/due.log"
        # 日志输出级别，可选：debug | info | warn | error | fatal | panic
        level = "info"
        # 日志输出格式，可选：text | json
        format = "text"
        # 是否输出到终端
        stdout = true
        # 时间格式，标准库时间格式
        timeFormat = "2006/01/02 15:04:05.000000"
        # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
        stackLevel = "error"
        # 文件最大留存时间，d:天、h:时、m:分、s:秒
        fileMaxAge = "7d"
        # 文件最大尺寸限制，单位（MB）
        fileMaxSize = 100
        # 文件切割方式
        fileCutRule = "day"
        # 是否启用调用文件全路径
        callerFullPath = true
        # 是否启用分级存储
        classifiedStorage = true
    # 腾讯云云CLS日志服务。以下配置项如果不存在，则会使用log域中的默认配置项；如果都未配置，则会使用系统默认配置
    [log.tencent]
        # 服务域名，公网使用公网域名，内网使用私网域名
        endpoint = "ap-guangzhou.cls.tencentcs.com"
        # 访问密钥ID
        accessKeyID = ""
        # 访问密钥密码
        accessKeySecret = ""
        # 主题ID
        topicID = ""
        # 日志输出级别，可选：debug | info | warn | error | fatal | panic
        level = "info"
        # 是否输出到终端
        stdout = true
        # 是否同步输出到远端
        syncout = false
        # 时间格式，标准库时间格式
        timeFormat = "2006/01/02 15:04:05.000000"
        # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
        stackLevel = "error"
        # 是否启用调用文件全路径
        callerFullPath = true
    # zap日志组件。以下配置项如果不存在，则会使用log域中的默认配置项；如果均未配置，则会使用系统默认配置
    [log.zap]
        # 日志输出文件
        file = "../../testdata/log/due.log"
        # 日志输出级别，可选：debug | info | warn | error | fatal | panic
        level = "info"
        # 日志输出格式，可选：text | json
        format = "text"
        # 是否输出到终端
        stdout = true
        # 时间格式，标准库时间格式
        timeFormat = "2006/01/02 15:04:05.000000"
        # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
        stackLevel = "error"
        # 文件最大留存时间，d:天、h:时、m:分、s:秒
        fileMaxAge = "7d"
        # 文件最大尺寸限制，单位（MB）
        fileMaxSize = 100
        # 文件切割方式
        fileCutRule = "day"
        # 是否启用调用文件全路径
        callerFullPath = true
        # 是否启用分级存储
        classifiedStorage = true

# 注册中心模块
[registry]
    # etcd注册中心
    [registry.etcd]
        # 客户端连接地址，默认为["127.0.0.1:2379"]
        addrs = ["127.0.0.1:2379"]
        # 客户端拨号超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为5s
        dialTimeout = "5s"
        # 命名空间，默认为services
        namespace = "services"
        # 超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为3s
        timeout = "3s"
        # 心跳重试次数，默认为3
        retryTimes = 3
        # 心跳重试间隔，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为10s
        retryInterval = "10s"
    # consule注册中心
    [registry.consul]
        # 客户端连接地址，默认为127.0.0.1:8500
        addr = "127.0.0.1:8500"
        # 是否启用健康检查，默认为true
        healthCheck = true
        # 健康检查时间间隔（秒），仅在启用健康检查后生效，默认为10
        healthCheckInterval = 10
        # 健康检查超时时间（秒），仅在启用健康检查后生效，默认为5
        healthCheckTimeout = 5
        # 是否启用心跳检查，默认为true
        heartbeatCheck = true
        # 心跳检查时间间隔（秒），仅在启用心跳检查后生效，默认为10
        heartbeatCheckInterval = 10
        # 健康检测失败后自动注销服务时间（秒），默认为30
        deregisterCriticalServiceAfter = 30
    # nacos注册中心
    [registry.nacos]
        # 服务器地址 [scheme://]ip:port[/nacos]。默认为["http://127.0.0.1:8848/nacos"]
        urls = ["http://127.0.0.1:8848/nacos"]
        # 集群名称。默认为DEFAULT
        clusterName = "DEFAULT"
        # 群组名称。默认为DEFAULT_GROUP
        groupName = "DEFAULT_GROUP"
        # 请求Nacos服务端超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为3秒
        timeout = "3s"
        # ACM的命名空间Id。默认为空
        namespaceId = ""
        # 当使用ACM时，需要该配置，默认为空。详见：https://help.aliyun.com/document_detail/130146.html
        endpoint = ""
        # ACM&KMS的regionId，用于配置中心的鉴权。默认为空
        regionId = ""
        # ACM&KMS的AccessKey，用于配置中心的鉴权。默认为空
        accessKey = ""
        # ACM&KMS的SecretKey，用于配置中心的鉴权。默认为空
        secretKey = ""
        # 是否开启kms，同时DataId必须以"cipher-"作为前缀才会启动加解密逻辑。kms可以参考文档：https://help.aliyun.com/product/28933.html
        openKMS = false
        # 缓存service信息的目录。默认为./run/nacos/naming/cache
        cacheDir = "./run/nacos/naming/cache"
        # Nacos服务端的API鉴权Username。默认为空
        username = ""
        # Nacos服务端的API鉴权Password。默认为空
        password = ""
        # 日志存储路径。默认为./run/nacos/naming/log
        logDir = "./run/nacos/naming/log"
        # 日志输出级别，可选：debug、info、warn、error。默认为info
        logLevel = "info"

# 配置中心模块
[config]
    # 文件配置
    [config.file]
        # 配置文件或配置目录路径
        path = "./config"
        # 读写模式。可选：read-only | write-only | read-write，默认为read-only
        mode = "read-only"
    # etcd配置中心
    [config.etcd]
        # 客户端连接地址，默认为["127.0.0.1:2379"]
        addrs = ["127.0.0.1:2379"]
        # 客户端拨号超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为5s
        dialTimeout = "5s"
        # 路径。默认为/config
        path = "/config"
        # 读写模式。可选：read-only | write-only | read-write，默认为read-only
        mode = "read-only"
    # consul配置中心
    [config.consul]
        # 客户端连接地址
        addr = "127.0.0.1:8500"
        # 路径。默认为config
        path = "config"
        # 读写模式。可选：read-only | write-only | read-write，默认为read-only
        mode = "read-only"
    # nacos配置中心
    [config.nacos]
        # 读写模式。可选：read-only | write-only | read-write，默认为read-only
        mode = "read-only"
        # 服务器地址 [scheme://]ip:port[/nacos]。默认为["http://127.0.0.1:8848/nacos"]
        urls = ["http://127.0.0.1:8848/nacos"]
        # 集群名称。默认为DEFAULT
        clusterName = "DEFAULT"
        # 群组名称。默认为DEFAULT_GROUP
        groupName = "DEFAULT_GROUP"
        # 请求Nacos服务端超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为3秒
        timeout = "3s"
        # ACM的命名空间Id。默认为空
        namespaceId = ""
        # 当使用ACM时，需要该配置，默认为空。详见：https://help.aliyun.com/document_detail/130146.html
        endpoint = ""
        # ACM&KMS的regionId，用于配置中心的鉴权。默认为空
        regionId = ""
        # ACM&KMS的AccessKey，用于配置中心的鉴权。默认为空
        accessKey = ""
        # ACM&KMS的SecretKey，用于配置中心的鉴权。默认为空
        secretKey = ""
        # 是否开启kms，同时DataId必须以"cipher-"作为前缀才会启动加解密逻辑。kms可以参考文档：https://help.aliyun.com/product/28933.html
        openKMS = false
        # 缓存service信息的目录。默认为./run/nacos/naming/cache
        cacheDir = "./run/nacos/config/cache"
        # Nacos服务端的API鉴权Username。默认为空
        username = ""
        # Nacos服务端的API鉴权Password。默认为空
        password = ""
        # 日志存储路径。默认为./run/nacos/naming/log
        logDir = "./run/nacos/config/log"
        # 日志输出级别，可选：debug、info、warn、error。默认为info
        logLevel = "info"

# 网络模块
[network]
    # ws网络模块
    [network.ws]
        # ws网络服务器
        [network.ws.server]
            # 服务器监听地址
            addr = ":3553"
            # 客户端连接路径
            path = "/"
            # 服务器最大连接数
            maxConnNum = 5000
            # 秘钥文件
            keyFile = ""
            # 证书文件
            certFile = ""
            # 跨域检测，空数组时不允许任何连接升级成websocket，未设置此参数时允许所有的链接升级成websocket
            origins = ["*"]
            # 握手超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为10s
            handshakeTimeout = "10s"
            # 心跳检测间隔时间。设置为0则不启用心跳检测，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为10s
            heartbeatInterval = "10s"
            # 心跳机制，默认为resp响应式心跳。可选：resp 响应式心跳 | tick 定时主推心跳
            heartbeatMechanism = "resp"
        # ws网络客户端
        [network.ws.client]
            # 拨号地址
            url = "ws://127.0.0.1:3553"
            # 握手超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为10s
            handshakeTimeout = "10s"
            # 心跳间隔时间；设置为0则不启用心跳检测，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为10s
            heartbeatInterval = "10s"
    # tcp网络模块
    [network.tcp]
        # tcp网络服务器
        [network.tcp.server]
            # 服务器监听地址
            addr = ":3553"
            # 服务器最大连接数
            maxConnNum = 5000
            # 心跳间隔时间；设置为0则不启用心跳检测，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为10s
            heartbeatInterval = "10s"
            # 心跳机制，默认resp
            heartbeatMechanism = "resp"
        # tcp网络客户端
        [network.tcp.client]
            # 拨号地址
            addr = "127.0.0.1:3553"
            # 拨号超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为5s
            timeout = "5s"
            # 心跳间隔时间；设置为0则不启用心跳检测，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为10s
            heartbeatInterval = "10s"

# 用户定位器模块
[locate]
    # redis定位模块
    [locate.redis]
        # 客户端连接地址
        addrs = ["127.0.0.1:6379"]
        # 数据库号
        db = 0
        # 用户名
        username = ""
        # 密码
        password = ""
        # 最大重试次数
        maxRetries = 3
        # key前缀
        prefix = "due"

# 缓存模块
[cache]
    # redis缓存模块
    [cache.redis]
        # 客户端连接地址
        addrs = ["127.0.0.1:6379"]
        # 数据库号
        db = 0
        # 用户名
        username = ""
        # 密码
        password = ""
        # 最大重试次数
        maxRetries = 3
        # key前缀，默认为cache
        prefix = "cache"
        # 空值，默认为cache@nil
        nilValue = "cache@nil"
        # 空值过期时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为10s
        nilExpiration = "10s"
        # 最小过期时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为1h
        minExpiration = "1h"
        # 最大过期时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为24h
        maxExpiration = "24h"

# 分布式锁模块
[lock]
    # redis分布式锁模块
    [lock.redis]
        # 客户端连接地址
        addrs = ["127.0.0.1:6379"]
        # 数据库号
        db = 5
        # 用户名
        username = ""
        # 密码
        password = ""
        # 最大重试次数
        maxRetries = 3
        # key前缀
        prefix = "lock"
        # 锁过期时间（自动续约），支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为3s
        expiration = "3s"
        # 循环获取锁的频率间隔时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为100ms
        acquireInterval = "100ms"
        # 循环获取锁的最大重试次数，默认为0，<=0则为无限次
        acquireMaxRetries = 0
    # memcache分布式锁模块
    [lock.memcache]
        # 客户端连接地址
        addrs = ["127.0.0.1:6379"]
        # key前缀
        prefix = "lock"
        # 锁过期时间（自动续约），支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为3s
        expiration = "3s"
        # 循环获取锁的频率间隔时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为100ms
        acquireInterval = "100ms"
        # 循环获取锁的最大重试次数，默认为0，<=0则为无限次
        acquireMaxRetries = 0

# 加密模块
[crypto]
    # RSA加密模块
    [crypto.rsa]
        [crypto.rsa.encryptor]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 填充规则，不区分大小写。可选：NORMAL | OAEP
            padding = "NORMAL"
            # 标签，加解密时必需一致
            label = ""
            # 加密数据块大小，单位字节。由于加密数据长度限制，需要对加密数据进行分块儿加密
            blockSize = 0
            # 公钥，可设置文件路径或公钥串
            publicKey = ""
        [crypto.rsa.decryptor]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 填充规则，不区分大小写。可选：NORMAL | OAEP
            padding = "NORMAL"
            # 标签。加解密时必需一致
            label = ""
            # 私钥。可设置文件路径或私钥串
            privateKey = ""
        [crypto.rsa.signer]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 填充规则，不区分大小写。可选：PKCS | PSS
            padding = "PSS"
            # 私钥。可设置文件路径或私钥串
            privateKey = ""
        [crypto.rsa.verifier]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 填充规则，不区分大小写。可选：PKCS | PSS
            padding = "PSS"
            # 公钥，可设置文件路径或公钥串
            publicKey = ""
    # ECC加密模块
    [crypto.ecc]
        [crypto.ecc.encryptor]
            # 共享信息。加解密时必需一致
            s1 = ""
            # 共享信息。加解密时必需一致
            s2 = ""
            # 公钥，可设置文件路径或公钥串
            publicKey = ""
        [crypto.ecc.decryptor]
            # 共享信息。加解密时必需一致
            s1 = ""
            # 共享信息。加解密时必需一致
            s2 = ""
            # 私钥。可设置文件路径或私钥串
            privateKey = ""
        [crypto.ecc.signer]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 签名分隔符。由于ECDSA签名算法会产生两段签名串，因此需要通过分隔符将其拼接为一个签名
            delimiter = " "
            # 私钥。可设置文件路径或私钥串
            privateKey = ""
        [crypto.ecc.verifier]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 签名分隔符。由于ECDSA签名算法会产生两段签名串，因此需要通过分隔符将其拼接为一个签名
            delimiter = " "
            # 公钥，可设置文件路径或公钥串
            publicKey = ""

# 事件总线模块
[eventbus]
    # nats事件总线模块
    [eventbus.nats]
        # 客户端连接地址，默认为nats://127.0.0.1:4222
        url = "nats://127.0.0.1:4222"
        # 客户端连接超时时间，支持单位：纳秒（ns）、微秒（us | µs）、毫秒（ms）、秒（s）、分（m）、小时（h）、天（d）。默认为2s
        timeout = "2s"
    # redis事件总线模块
    [eventbus.redis]
        # 客户端连接地址
        addrs = ["127.0.0.1:6379"]
        # 数据库号
        db = 0
        # 用户名
        username = ""
        # 密码
        password = ""
        # 最大重试次数
        maxRetries = 3
        # key前缀
        prefix = "due"
    # kafka事件总线模块
    [eventbus.kafka]
        # 客户端连接地址
        addrs = ["127.0.0.1:9092"]
        # Kafka版本，默认为无版本
        version = ""